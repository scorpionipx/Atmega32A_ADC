
Atmega32A_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000648  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00000648  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f57  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000832  00000000  00000000  000027b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a46  00000000  00000000  00002fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  00003a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d3  00000000  00000000  00003b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000655  00000000  00000000  00004137  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000478c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3e       	cpi	r26, 0xEA	; 234
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c3 02 	call	0x586	; 0x586 <main>
  7a:	0c 94 22 03 	jmp	0x644	; 0x644 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
  82:	1a ba       	out	0x1a, r1	; 26
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	87 b9       	out	0x07, r24	; 7
  88:	87 e8       	ldi	r24, 0x87	; 135
  8a:	86 b9       	out	0x06, r24	; 6
  8c:	08 95       	ret

0000008e <ADC_get_value>:
  8e:	97 b1       	in	r25, 0x07	; 7
  90:	98 7f       	andi	r25, 0xF8	; 248
  92:	87 70       	andi	r24, 0x07	; 7
  94:	89 2b       	or	r24, r25
  96:	87 b9       	out	0x07, r24	; 7
  98:	36 9a       	sbi	0x06, 6	; 6
  9a:	36 99       	sbic	0x06, 6	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <ADC_get_value+0xc>
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	95 b1       	in	r25, 0x05	; 5
  a2:	08 95       	ret

000000a4 <hx_send_data>:
}

void hx_send_data(unsigned char _data)
{
	// activate hx1230
	CLEAR_HX_CE;
  a4:	a9 98       	cbi	0x15, 1	; 21
	
	// configure communication for data transfer
	SET_HX_DIN;
  a6:	aa 9a       	sbi	0x15, 2	; 21
	
	// toggle clock
	SET_HX_CLK;
  a8:	ab 9a       	sbi	0x15, 3	; 21
	CLEAR_HX_CLK;
  aa:	ab 98       	cbi	0x15, 3	; 21
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
  ac:	27 e0       	ldi	r18, 0x07	; 7
  ae:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_data >> bit_position) & 1) == 1)
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	02 2e       	mov	r0, r18
  b6:	02 c0       	rjmp	.+4      	; 0xbc <hx_send_data+0x18>
  b8:	55 95       	asr	r21
  ba:	47 95       	ror	r20
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <hx_send_data+0x14>
  c0:	40 ff       	sbrs	r20, 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <hx_send_data+0x24>
		{
			SET_HX_DIN;
  c4:	aa 9a       	sbi	0x15, 2	; 21
  c6:	01 c0       	rjmp	.+2      	; 0xca <hx_send_data+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
  c8:	aa 98       	cbi	0x15, 2	; 21
		}
		
		// toggle clock
		SET_HX_CLK;
  ca:	ab 9a       	sbi	0x15, 3	; 21
		CLEAR_HX_CLK;
  cc:	ab 98       	cbi	0x15, 3	; 21
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	31 09       	sbc	r19, r1
  d2:	78 f7       	brcc	.-34     	; 0xb2 <hx_send_data+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
  d4:	a9 9a       	sbi	0x15, 1	; 21
  d6:	08 95       	ret

000000d8 <hx_send_command>:
}

void hx_send_command(unsigned char _command)
{
	// activate hx1230
	CLEAR_HX_CE;
  d8:	a9 98       	cbi	0x15, 1	; 21
	
	// configure communication for command transfer
	CLEAR_HX_DIN;
  da:	aa 98       	cbi	0x15, 2	; 21
	
	// toggle clock
	SET_HX_CLK;
  dc:	ab 9a       	sbi	0x15, 3	; 21
	CLEAR_HX_CLK;
  de:	ab 98       	cbi	0x15, 3	; 21
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
  e0:	27 e0       	ldi	r18, 0x07	; 7
  e2:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_command >> bit_position) & 1) == 1)
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	ac 01       	movw	r20, r24
  e8:	02 2e       	mov	r0, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <hx_send_command+0x18>
  ec:	55 95       	asr	r21
  ee:	47 95       	ror	r20
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <hx_send_command+0x14>
  f4:	40 ff       	sbrs	r20, 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <hx_send_command+0x24>
		{
			SET_HX_DIN;
  f8:	aa 9a       	sbi	0x15, 2	; 21
  fa:	01 c0       	rjmp	.+2      	; 0xfe <hx_send_command+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
  fc:	aa 98       	cbi	0x15, 2	; 21
		}
		
		// toggle clock
		SET_HX_CLK;
  fe:	ab 9a       	sbi	0x15, 3	; 21
		CLEAR_HX_CLK;
 100:	ab 98       	cbi	0x15, 3	; 21
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 102:	21 50       	subi	r18, 0x01	; 1
 104:	31 09       	sbc	r19, r1
 106:	78 f7       	brcc	.-34     	; 0xe6 <hx_send_command+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
 108:	a9 9a       	sbi	0x15, 1	; 21
 10a:	08 95       	ret

0000010c <init_hx1230_control>:
#include "hx_8x6_characters.h"

void init_hx1230_control(void)
{
	// set required pins as output
	HX1230_DDR |= ((1 << HX_RST) | (1 << HX_CE) | (1 << HX_DIN) | (1 << HX_CLK));
 10c:	84 b3       	in	r24, 0x14	; 20
 10e:	8f 60       	ori	r24, 0x0F	; 15
 110:	84 bb       	out	0x14, r24	; 20
	
	// set idle state
	CLEAR_HX_CLK;
 112:	ab 98       	cbi	0x15, 3	; 21
	CLEAR_HX_RST;
 114:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	80 e7       	ldi	r24, 0x70	; 112
 11a:	92 e0       	ldi	r25, 0x02	; 2
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <init_hx1230_control+0x10>
 124:	00 c0       	rjmp	.+0      	; 0x126 <init_hx1230_control+0x1a>
 126:	00 00       	nop
	_delay_ms(50);
	SET_HX_RST;
 128:	a8 9a       	sbi	0x15, 0	; 21
	CLEAR_HX_CE;
 12a:	a9 98       	cbi	0x15, 1	; 21
 12c:	8f e9       	ldi	r24, 0x9F	; 159
 12e:	9f e0       	ldi	r25, 0x0F	; 15
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <init_hx1230_control+0x24>
 134:	00 c0       	rjmp	.+0      	; 0x136 <init_hx1230_control+0x2a>
 136:	00 00       	nop
	_delay_ms(1);
	SET_HX_CE;
 138:	a9 9a       	sbi	0x15, 1	; 21
 13a:	8f e9       	ldi	r24, 0x9F	; 159
 13c:	9f e0       	ldi	r25, 0x0F	; 15
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <init_hx1230_control+0x32>
 142:	00 c0       	rjmp	.+0      	; 0x144 <init_hx1230_control+0x38>
 144:	00 00       	nop
	_delay_ms(1);
	
	// commands needed to initialize hx1230 display
	// found within a chinese data sheet
	
	hx_send_command(0x2f);
 146:	8f e2       	ldi	r24, 0x2F	; 47
 148:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0x90);
 14c:	80 e9       	ldi	r24, 0x90	; 144
 14e:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0xa6);
 152:	86 ea       	ldi	r24, 0xA6	; 166
 154:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0xa4);
 158:	84 ea       	ldi	r24, 0xA4	; 164
 15a:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0xaf);
 15e:	8f ea       	ldi	r24, 0xAF	; 175
 160:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	
	hx_send_command(0x40);
 164:	80 e4       	ldi	r24, 0x40	; 64
 166:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0xb0);
 16a:	80 eb       	ldi	r24, 0xB0	; 176
 16c:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0x10);
 170:	80 e1       	ldi	r24, 0x10	; 16
 172:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0x00);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
 17c:	08 95       	ret

0000017e <hx_set_coordinates>:
	// deactivate hx1230
	SET_HX_CE;
}

void hx_set_coordinates(unsigned char _x, unsigned char _y)
{
 17e:	cf 93       	push	r28
 180:	c8 2f       	mov	r28, r24
	// 0, 0 is the upper left corner
	
	hx_send_command(0xB0 + _y);
 182:	80 eb       	ldi	r24, 0xB0	; 176
 184:	86 0f       	add	r24, r22
 186:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
 18a:	8c 2f       	mov	r24, r28
 18c:	8f 77       	andi	r24, 0x7F	; 127
 18e:	82 95       	swap	r24
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	80 61       	ori	r24, 0x10	; 16
 194:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0x0F & _x);
 198:	8c 2f       	mov	r24, r28
 19a:	8f 70       	andi	r24, 0x0F	; 15
 19c:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <hx_clear_screen>:

void hx_clear_screen(void)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
 1b0:	d9 e0       	ldi	r29, 0x09	; 9
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <hx_clear_screen+0x1e>
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
 1ba:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <hx_clear_screen+0x10>
 1be:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
 1c0:	11 f0       	breq	.+4      	; 0x1c6 <hx_clear_screen+0x22>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
	hx_send_command(0x0F & _x);
}

void hx_clear_screen(void)
{
 1c2:	c1 e6       	ldi	r28, 0x61	; 97
 1c4:	f7 cf       	rjmp	.-18     	; 0x1b4 <hx_clear_screen+0x10>
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
		}
	}
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <hx_fill_screen>:

void hx_fill_screen(void)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
 1d8:	d9 e0       	ldi	r29, 0x09	; 9
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <hx_fill_screen+0x1e>
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
 1e2:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
 1e4:	d9 f7       	brne	.-10     	; 0x1dc <hx_fill_screen+0x10>
 1e6:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
 1e8:	11 f0       	breq	.+4      	; 0x1ee <hx_fill_screen+0x22>
		}
	}
}

void hx_fill_screen(void)
{
 1ea:	c0 e6       	ldi	r28, 0x60	; 96
 1ec:	f7 cf       	rjmp	.-18     	; 0x1dc <hx_fill_screen+0x10>
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
		}
	}
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <hx_write_char>:

void hx_write_char(const hx_8x6_character _character)
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
 1fe:	8c 01       	movw	r16, r24
 200:	0a 5f       	subi	r16, 0xFA	; 250
 202:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int row_index = 0; row_index < 6; row_index ++)
	{
		hx_send_data(_character[row_index]);
 204:	89 91       	ld	r24, Y+
 206:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	}
}

void hx_write_char(const hx_8x6_character _character)
{
	for(int row_index = 0; row_index < 6; row_index ++)
 20a:	c0 17       	cp	r28, r16
 20c:	d1 07       	cpc	r29, r17
 20e:	d1 f7       	brne	.-12     	; 0x204 <hx_write_char+0x10>
	{
		hx_send_data(_character[row_index]);
	}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <display_title>:




void display_title(void)
{
 21a:	cf 93       	push	r28
	
	hx_set_coordinates(0, 0);
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
 224:	cf e0       	ldi	r28, 0x0F	; 15
	
	for(char i=0; i<15; i++)
	{
		hx_send_data(0);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
 22c:	c1 50       	subi	r28, 0x01	; 1
void display_title(void)
{
	
	hx_set_coordinates(0, 0);
	
	for(char i=0; i<15; i++)
 22e:	d9 f7       	brne	.-10     	; 0x226 <display_title+0xc>
	{
		hx_send_data(0);
	}
	
	hx_write_char(HX_ch_S);
 230:	82 ea       	ldi	r24, 0xA2	; 162
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_C);
 238:	8e ed       	ldi	r24, 0xDE	; 222
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_O);
 240:	84 eb       	ldi	r24, 0xB4	; 180
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_R);
 248:	88 ea       	ldi	r24, 0xA8	; 168
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_P);
 250:	8e ea       	ldi	r24, 0xAE	; 174
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_I);
 258:	86 ec       	ldi	r24, 0xC6	; 198
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_O);
 260:	84 eb       	ldi	r24, 0xB4	; 180
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_N);
 268:	8a eb       	ldi	r24, 0xBA	; 186
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_I);
 270:	86 ec       	ldi	r24, 0xC6	; 198
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_P);
 278:	8e ea       	ldi	r24, 0xAE	; 174
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_X);
 280:	86 e9       	ldi	r24, 0x96	; 150
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(0, 1);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
 290:	ca e0       	ldi	r28, 0x0A	; 10
	
	for(char i=0; i<10; i++)
	{
		hx_send_data(0);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
 298:	c1 50       	subi	r28, 0x01	; 1
	hx_write_char(HX_ch_P);
	hx_write_char(HX_ch_X);
	
	hx_set_coordinates(0, 1);
	
	for(char i=0; i<10; i++)
 29a:	d9 f7       	brne	.-10     	; 0x292 <display_title+0x78>
	{
		hx_send_data(0);
	}	
	hx_write_char(HX_ch_A);
 29c:	84 ee       	ldi	r24, 0xE4	; 228
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_T);
 2a4:	8c e9       	ldi	r24, 0x9C	; 156
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_M);
 2ac:	80 ec       	ldi	r24, 0xC0	; 192
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_E);
 2b4:	82 ed       	ldi	r24, 0xD2	; 210
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_G);
 2bc:	8c ec       	ldi	r24, 0xCC	; 204
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_A);
 2c4:	84 ee       	ldi	r24, 0xE4	; 228
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_3);
 2cc:	8e e7       	ldi	r24, 0x7E	; 126
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_2);
 2d4:	84 e8       	ldi	r24, 0x84	; 132
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_A);
 2dc:	84 ee       	ldi	r24, 0xE4	; 228
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_send_data(0);
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_write_char(HX_ch_A);
 308:	84 ee       	ldi	r24, 0xE4	; 228
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_D);
 310:	88 ed       	ldi	r24, 0xD8	; 216
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_C);
 318:	8e ed       	ldi	r24, 0xDE	; 222
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <display_menu>:

void display_menu(void)
{
	hx_set_coordinates(0, 3);
 324:	63 e0       	ldi	r22, 0x03	; 3
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_ch_A);
 32c:	84 ee       	ldi	r24, 0xE4	; 228
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_1);
 334:	8a e8       	ldi	r24, 0x8A	; 138
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_send_data(0);
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_write_char(HX_ch_N);
 360:	8a eb       	ldi	r24, 0xBA	; 186
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_A);
 368:	84 ee       	ldi	r24, 0xE4	; 228
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(0, 4);
 370:	64 e0       	ldi	r22, 0x04	; 4
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_ch_A);
 378:	84 ee       	ldi	r24, 0xE4	; 228
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_2);
 380:	84 e8       	ldi	r24, 0x84	; 132
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_send_data(0);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_write_char(HX_ch_N);
 3ac:	8a eb       	ldi	r24, 0xBA	; 186
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_A);
 3b4:	84 ee       	ldi	r24, 0xE4	; 228
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(0, 5);
 3bc:	65 e0       	ldi	r22, 0x05	; 5
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_ch_A);
 3c4:	84 ee       	ldi	r24, 0xE4	; 228
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_3);
 3cc:	8e e7       	ldi	r24, 0x7E	; 126
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_send_data(0);
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_write_char(HX_ch_N);
 3f8:	8a eb       	ldi	r24, 0xBA	; 186
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_A);
 400:	84 ee       	ldi	r24, 0xE4	; 228
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(0, 6);
 408:	66 e0       	ldi	r22, 0x06	; 6
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_ch_A);
 410:	84 ee       	ldi	r24, 0xE4	; 228
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_4);
 418:	88 e7       	ldi	r24, 0x78	; 120
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_send_data(0);
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_write_char(HX_ch_N);
 444:	8a eb       	ldi	r24, 0xBA	; 186
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_A);
 44c:	84 ee       	ldi	r24, 0xE4	; 228
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(HX_MAX_COL / 2, 3);
 454:	63 e0       	ldi	r22, 0x03	; 3
 456:	80 e3       	ldi	r24, 0x30	; 48
 458:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_ch_A);
 45c:	84 ee       	ldi	r24, 0xE4	; 228
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_5);
 464:	82 e7       	ldi	r24, 0x72	; 114
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_send_data(0);
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_write_char(HX_ch_N);
 490:	8a eb       	ldi	r24, 0xBA	; 186
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_A);
 498:	84 ee       	ldi	r24, 0xE4	; 228
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(HX_MAX_COL / 2, 4);
 4a0:	64 e0       	ldi	r22, 0x04	; 4
 4a2:	80 e3       	ldi	r24, 0x30	; 48
 4a4:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_ch_A);
 4a8:	84 ee       	ldi	r24, 0xE4	; 228
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_6);
 4b0:	8c e6       	ldi	r24, 0x6C	; 108
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_send_data(0);
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_write_char(HX_ch_N);
 4dc:	8a eb       	ldi	r24, 0xBA	; 186
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_A);
 4e4:	84 ee       	ldi	r24, 0xE4	; 228
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(HX_MAX_COL / 2, 5);
 4ec:	65 e0       	ldi	r22, 0x05	; 5
 4ee:	80 e3       	ldi	r24, 0x30	; 48
 4f0:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_ch_A);
 4f4:	84 ee       	ldi	r24, 0xE4	; 228
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_7);
 4fc:	86 e6       	ldi	r24, 0x66	; 102
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_send_data(0);
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_write_char(HX_ch_N);
 528:	8a eb       	ldi	r24, 0xBA	; 186
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_A);
 530:	84 ee       	ldi	r24, 0xE4	; 228
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(HX_MAX_COL / 2, 6);
 538:	66 e0       	ldi	r22, 0x06	; 6
 53a:	80 e3       	ldi	r24, 0x30	; 48
 53c:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_ch_A);
 540:	84 ee       	ldi	r24, 0xE4	; 228
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_8);
 548:	80 e6       	ldi	r24, 0x60	; 96
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_send_data(0);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_send_data(0);
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	hx_write_char(HX_ch_N);
 574:	8a eb       	ldi	r24, 0xBA	; 186
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_ch_A);
 57c:	84 ee       	ldi	r24, 0xE4	; 228
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
 584:	08 95       	ret

00000586 <main>:
 586:	2f ef       	ldi	r18, 0xFF	; 255
 588:	80 e7       	ldi	r24, 0x70	; 112
 58a:	92 e0       	ldi	r25, 0x02	; 2
 58c:	21 50       	subi	r18, 0x01	; 1
 58e:	80 40       	sbci	r24, 0x00	; 0
 590:	90 40       	sbci	r25, 0x00	; 0
 592:	e1 f7       	brne	.-8      	; 0x58c <main+0x6>
 594:	00 c0       	rjmp	.+0      	; 0x596 <main+0x10>
 596:	00 00       	nop
void display_menu(void);

int main(void)
{
	_delay_ms(50);
    ADC_init();
 598:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
 59c:	2f ef       	ldi	r18, 0xFF	; 255
 59e:	80 e7       	ldi	r24, 0x70	; 112
 5a0:	92 e0       	ldi	r25, 0x02	; 2
 5a2:	21 50       	subi	r18, 0x01	; 1
 5a4:	80 40       	sbci	r24, 0x00	; 0
 5a6:	90 40       	sbci	r25, 0x00	; 0
 5a8:	e1 f7       	brne	.-8      	; 0x5a2 <main+0x1c>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <main+0x26>
 5ac:	00 00       	nop
	
	_delay_ms(50);
	init_hx1230_control();
 5ae:	0e 94 86 00 	call	0x10c	; 0x10c <init_hx1230_control>
 5b2:	2f ef       	ldi	r18, 0xFF	; 255
 5b4:	84 e3       	ldi	r24, 0x34	; 52
 5b6:	9c e0       	ldi	r25, 0x0C	; 12
 5b8:	21 50       	subi	r18, 0x01	; 1
 5ba:	80 40       	sbci	r24, 0x00	; 0
 5bc:	90 40       	sbci	r25, 0x00	; 0
 5be:	e1 f7       	brne	.-8      	; 0x5b8 <main+0x32>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <main+0x3c>
 5c2:	00 00       	nop
	
	_delay_ms(250);
	hx_fill_screen();
 5c4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <hx_fill_screen>
 5c8:	2f ef       	ldi	r18, 0xFF	; 255
 5ca:	89 e6       	ldi	r24, 0x69	; 105
 5cc:	98 e1       	ldi	r25, 0x18	; 24
 5ce:	21 50       	subi	r18, 0x01	; 1
 5d0:	80 40       	sbci	r24, 0x00	; 0
 5d2:	90 40       	sbci	r25, 0x00	; 0
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <main+0x48>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <main+0x52>
 5d8:	00 00       	nop
	_delay_ms(500);
	hx_clear_screen();
 5da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <hx_clear_screen>
	display_title();
 5de:	0e 94 0d 01 	call	0x21a	; 0x21a <display_title>
	display_menu();
 5e2:	0e 94 92 01 	call	0x324	; 0x324 <display_menu>
	
	uint8_t adc_channel = 0;
 5e6:	c0 e0       	ldi	r28, 0x00	; 0
    while (1) 
    {
		_delay_ms(1000);
		adc_value = ADC_get_value(adc_channel);
		
		hx_set_coordinates((adc_channel / 4) * HX_MAX_COL / 2 + 18, (adc_channel % 4) + 3);
 5e8:	d0 e6       	ldi	r29, 0x60	; 96
 5ea:	2f ef       	ldi	r18, 0xFF	; 255
 5ec:	83 ed       	ldi	r24, 0xD3	; 211
 5ee:	90 e3       	ldi	r25, 0x30	; 48
 5f0:	21 50       	subi	r18, 0x01	; 1
 5f2:	80 40       	sbci	r24, 0x00	; 0
 5f4:	90 40       	sbci	r25, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <main+0x6a>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0x74>
 5fa:	00 00       	nop
	uint16_t adc_value = 0;
	
    while (1) 
    {
		_delay_ms(1000);
		adc_value = ADC_get_value(adc_channel);
 5fc:	8c 2f       	mov	r24, r28
 5fe:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_get_value>
		
		hx_set_coordinates((adc_channel / 4) * HX_MAX_COL / 2 + 18, (adc_channel % 4) + 3);
 602:	6c 2f       	mov	r22, r28
 604:	63 70       	andi	r22, 0x03	; 3
 606:	6d 5f       	subi	r22, 0xFD	; 253
 608:	8c 2f       	mov	r24, r28
 60a:	86 95       	lsr	r24
 60c:	86 95       	lsr	r24
 60e:	d8 9f       	mul	r29, r24
 610:	c0 01       	movw	r24, r0
 612:	11 24       	eor	r1, r1
 614:	95 95       	asr	r25
 616:	87 95       	ror	r24
 618:	8e 5e       	subi	r24, 0xEE	; 238
 61a:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
		hx_write_char(HX_ch_1);
 61e:	8a e8       	ldi	r24, 0x8A	; 138
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
		hx_write_char(HX_ch_0);
 626:	80 e9       	ldi	r24, 0x90	; 144
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
		hx_write_char(HX_ch_0);
 62e:	80 e9       	ldi	r24, 0x90	; 144
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
		hx_write_char(HX_ch_0);
 636:	80 e9       	ldi	r24, 0x90	; 144
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
		
		adc_channel ++;
 63e:	cf 5f       	subi	r28, 0xFF	; 255
		adc_channel %= 8;
 640:	c7 70       	andi	r28, 0x07	; 7
 642:	d3 cf       	rjmp	.-90     	; 0x5ea <main+0x64>

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
