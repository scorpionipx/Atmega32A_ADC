
Atmega32A_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000600  00800060  00000474  000004e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b18  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001935  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000823  00000000  00000000  00002531  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088a  00000000  00000000  00002d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  000035e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b5  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000655  00000000  00000000  00003bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00004222  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	16 e0       	ldi	r17, 0x06	; 6
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e5 01 	call	0x3ca	; 0x3ca <main>
  7a:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
  82:	1a ba       	out	0x1a, r1	; 26
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	87 b9       	out	0x07, r24	; 7
  88:	87 e8       	ldi	r24, 0x87	; 135
  8a:	86 b9       	out	0x06, r24	; 6
  8c:	08 95       	ret

0000008e <ADC_get_value>:
  8e:	97 b1       	in	r25, 0x07	; 7
  90:	98 7f       	andi	r25, 0xF8	; 248
  92:	87 70       	andi	r24, 0x07	; 7
  94:	89 2b       	or	r24, r25
  96:	87 b9       	out	0x07, r24	; 7
  98:	36 9a       	sbi	0x06, 6	; 6
  9a:	36 99       	sbic	0x06, 6	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <ADC_get_value+0xc>
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	95 b1       	in	r25, 0x05	; 5
  a2:	08 95       	ret

000000a4 <hx_send_data>:
}

void hx_send_data(unsigned char _data)
{
	// activate hx1230
	CLEAR_HX_CE;
  a4:	a9 98       	cbi	0x15, 1	; 21
	
	// configure communication for data transfer
	SET_HX_DIN;
  a6:	aa 9a       	sbi	0x15, 2	; 21
	
	// toggle clock
	SET_HX_CLK;
  a8:	ab 9a       	sbi	0x15, 3	; 21
	CLEAR_HX_CLK;
  aa:	ab 98       	cbi	0x15, 3	; 21
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
  ac:	27 e0       	ldi	r18, 0x07	; 7
  ae:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_data >> bit_position) & 1) == 1)
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	02 2e       	mov	r0, r18
  b6:	02 c0       	rjmp	.+4      	; 0xbc <hx_send_data+0x18>
  b8:	55 95       	asr	r21
  ba:	47 95       	ror	r20
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <hx_send_data+0x14>
  c0:	40 ff       	sbrs	r20, 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <hx_send_data+0x24>
		{
			SET_HX_DIN;
  c4:	aa 9a       	sbi	0x15, 2	; 21
  c6:	01 c0       	rjmp	.+2      	; 0xca <hx_send_data+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
  c8:	aa 98       	cbi	0x15, 2	; 21
		}
		
		// toggle clock
		SET_HX_CLK;
  ca:	ab 9a       	sbi	0x15, 3	; 21
		CLEAR_HX_CLK;
  cc:	ab 98       	cbi	0x15, 3	; 21
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual data, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	31 09       	sbc	r19, r1
  d2:	78 f7       	brcc	.-34     	; 0xb2 <hx_send_data+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
  d4:	a9 9a       	sbi	0x15, 1	; 21
  d6:	08 95       	ret

000000d8 <hx_send_command>:
}

void hx_send_command(unsigned char _command)
{
	// activate hx1230
	CLEAR_HX_CE;
  d8:	a9 98       	cbi	0x15, 1	; 21
	
	// configure communication for command transfer
	CLEAR_HX_DIN;
  da:	aa 98       	cbi	0x15, 2	; 21
	
	// toggle clock
	SET_HX_CLK;
  dc:	ab 9a       	sbi	0x15, 3	; 21
	CLEAR_HX_CLK;
  de:	ab 98       	cbi	0x15, 3	; 21
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
  e0:	27 e0       	ldi	r18, 0x07	; 7
  e2:	30 e0       	ldi	r19, 0x00	; 0
	{
		// calculate bit to be send
		if(((_command >> bit_position) & 1) == 1)
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	ac 01       	movw	r20, r24
  e8:	02 2e       	mov	r0, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <hx_send_command+0x18>
  ec:	55 95       	asr	r21
  ee:	47 95       	ror	r20
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <hx_send_command+0x14>
  f4:	40 ff       	sbrs	r20, 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <hx_send_command+0x24>
		{
			SET_HX_DIN;
  f8:	aa 9a       	sbi	0x15, 2	; 21
  fa:	01 c0       	rjmp	.+2      	; 0xfe <hx_send_command+0x26>
		}
		else
		{
			CLEAR_HX_DIN;
  fc:	aa 98       	cbi	0x15, 2	; 21
		}
		
		// toggle clock
		SET_HX_CLK;
  fe:	ab 9a       	sbi	0x15, 3	; 21
		CLEAR_HX_CLK;
 100:	ab 98       	cbi	0x15, 3	; 21
	// toggle clock
	SET_HX_CLK;
	CLEAR_HX_CLK;
	
	// send the actual command, MSB fiHX_RST
	for(int bit_position = 7; bit_position >= 0; bit_position--)
 102:	21 50       	subi	r18, 0x01	; 1
 104:	31 09       	sbc	r19, r1
 106:	78 f7       	brcc	.-34     	; 0xe6 <hx_send_command+0xe>
		SET_HX_CLK;
		CLEAR_HX_CLK;
	}
	
	// deactivate hx1230
	SET_HX_CE;
 108:	a9 9a       	sbi	0x15, 1	; 21
 10a:	08 95       	ret

0000010c <init_hx1230_control>:
#include "hx_8x6_characters.h"

void init_hx1230_control(void)
{
	// set required pins as output
	HX1230_DDR |= ((1 << HX_RST) | (1 << HX_CE) | (1 << HX_DIN) | (1 << HX_CLK));
 10c:	84 b3       	in	r24, 0x14	; 20
 10e:	8f 60       	ori	r24, 0x0F	; 15
 110:	84 bb       	out	0x14, r24	; 20
	
	// set idle state
	CLEAR_HX_CLK;
 112:	ab 98       	cbi	0x15, 3	; 21
	CLEAR_HX_RST;
 114:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	80 e7       	ldi	r24, 0x70	; 112
 11a:	92 e0       	ldi	r25, 0x02	; 2
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <init_hx1230_control+0x10>
 124:	00 c0       	rjmp	.+0      	; 0x126 <init_hx1230_control+0x1a>
 126:	00 00       	nop
	_delay_ms(50);
	SET_HX_RST;
 128:	a8 9a       	sbi	0x15, 0	; 21
	CLEAR_HX_CE;
 12a:	a9 98       	cbi	0x15, 1	; 21
 12c:	8f e9       	ldi	r24, 0x9F	; 159
 12e:	9f e0       	ldi	r25, 0x0F	; 15
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <init_hx1230_control+0x24>
 134:	00 c0       	rjmp	.+0      	; 0x136 <init_hx1230_control+0x2a>
 136:	00 00       	nop
	_delay_ms(1);
	SET_HX_CE;
 138:	a9 9a       	sbi	0x15, 1	; 21
 13a:	8f e9       	ldi	r24, 0x9F	; 159
 13c:	9f e0       	ldi	r25, 0x0F	; 15
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <init_hx1230_control+0x32>
 142:	00 c0       	rjmp	.+0      	; 0x144 <init_hx1230_control+0x38>
 144:	00 00       	nop
	_delay_ms(1);
	
	// commands needed to initialize hx1230 display
	// found within a chinese data sheet
	
	hx_send_command(0x2f);
 146:	8f e2       	ldi	r24, 0x2F	; 47
 148:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0x90);
 14c:	80 e9       	ldi	r24, 0x90	; 144
 14e:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0xa6);
 152:	86 ea       	ldi	r24, 0xA6	; 166
 154:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0xa4);
 158:	84 ea       	ldi	r24, 0xA4	; 164
 15a:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0xaf);
 15e:	8f ea       	ldi	r24, 0xAF	; 175
 160:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	
	hx_send_command(0x40);
 164:	80 e4       	ldi	r24, 0x40	; 64
 166:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0xb0);
 16a:	80 eb       	ldi	r24, 0xB0	; 176
 16c:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0x10);
 170:	80 e1       	ldi	r24, 0x10	; 16
 172:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0x00);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
 17c:	08 95       	ret

0000017e <hx_set_coordinates>:
	// deactivate hx1230
	SET_HX_CE;
}

void hx_set_coordinates(unsigned char _x, unsigned char _y)
{
 17e:	cf 93       	push	r28
 180:	c8 2f       	mov	r28, r24
	// 0, 0 is the upper left corner
	
	hx_send_command(0xB0 + _y);
 182:	80 eb       	ldi	r24, 0xB0	; 176
 184:	86 0f       	add	r24, r22
 186:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
 18a:	8c 2f       	mov	r24, r28
 18c:	8f 77       	andi	r24, 0x7F	; 127
 18e:	82 95       	swap	r24
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	80 61       	ori	r24, 0x10	; 16
 194:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
	hx_send_command(0x0F & _x);
 198:	8c 2f       	mov	r24, r28
 19a:	8f 70       	andi	r24, 0x0F	; 15
 19c:	0e 94 6c 00 	call	0xd8	; 0xd8 <hx_send_command>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <hx_clear_screen>:

void hx_clear_screen(void)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
 1b0:	d9 e0       	ldi	r29, 0x09	; 9
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <hx_clear_screen+0x1e>
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
 1ba:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
	{
		for(col = 0; col <= HX_MAX_COL; col ++)
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <hx_clear_screen+0x10>
 1be:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row <= HX_MAX_ROW_ROOT; row ++)
 1c0:	11 f0       	breq	.+4      	; 0x1c6 <hx_clear_screen+0x22>
	hx_send_command(0x10 | ((_x & 0x7F) >> 4));
	hx_send_command(0x0F & _x);
}

void hx_clear_screen(void)
{
 1c2:	c1 e6       	ldi	r28, 0x61	; 97
 1c4:	f7 cf       	rjmp	.-18     	; 0x1b4 <hx_clear_screen+0x10>
		for(col = 0; col <= HX_MAX_COL; col ++)
		{
			hx_send_data(0x00);
		}
	}
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <hx_fill_screen>:

void hx_fill_screen(void)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
 1d8:	d9 e0       	ldi	r29, 0x09	; 9
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <hx_fill_screen+0x1e>
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
 1e2:	c1 50       	subi	r28, 0x01	; 1
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
	{
		for(col = 0; col < 96; col ++)
 1e4:	d9 f7       	brne	.-10     	; 0x1dc <hx_fill_screen+0x10>
 1e6:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char col, row;
	
	hx_set_coordinates(0, 0);
	
	for(row = 0; row < 9; row ++)
 1e8:	11 f0       	breq	.+4      	; 0x1ee <hx_fill_screen+0x22>
		}
	}
}

void hx_fill_screen(void)
{
 1ea:	c0 e6       	ldi	r28, 0x60	; 96
 1ec:	f7 cf       	rjmp	.-18     	; 0x1dc <hx_fill_screen+0x10>
		for(col = 0; col < 96; col ++)
		{
			hx_send_data(0xFF);
		}
	}
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <hx_write_char>:

void hx_write_char(const unsigned char *_character)
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
 1fe:	8c 01       	movw	r16, r24
 200:	0a 5f       	subi	r16, 0xFA	; 250
 202:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int row_index = 0; row_index < 6; row_index ++)
	{
		hx_send_data(_character[row_index]);
 204:	89 91       	ld	r24, Y+
 206:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
	}
}

void hx_write_char(const unsigned char *_character)
{
	for(int row_index = 0; row_index < 6; row_index ++)
 20a:	c0 17       	cp	r28, r16
 20c:	d1 07       	cpc	r29, r17
 20e:	d1 f7       	brne	.-12     	; 0x204 <hx_write_char+0x10>
	{
		hx_send_data(_character[row_index]);
	}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	08 95       	ret

0000021a <display_title>:




void display_title(void)
{
 21a:	cf 93       	push	r28
	
	hx_set_coordinates(0, 0);
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
 224:	cf e0       	ldi	r28, 0x0F	; 15
	
	for(char i=0; i<15; i++)
	{
		hx_send_data(0);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
 22c:	c1 50       	subi	r28, 0x01	; 1
void display_title(void)
{
	
	hx_set_coordinates(0, 0);
	
	for(char i=0; i<15; i++)
 22e:	d9 f7       	brne	.-10     	; 0x226 <display_title+0xc>
	{
		hx_send_data(0);
	}
	
	hx_write_char(HX_character['S']);
 230:	82 e5       	ldi	r24, 0x52	; 82
 232:	92 e0       	ldi	r25, 0x02	; 2
 234:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['c']);
 238:	82 eb       	ldi	r24, 0xB2	; 178
 23a:	92 e0       	ldi	r25, 0x02	; 2
 23c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['o']);
 240:	8a ef       	ldi	r24, 0xFA	; 250
 242:	92 e0       	ldi	r25, 0x02	; 2
 244:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['r']);
 248:	8c e0       	ldi	r24, 0x0C	; 12
 24a:	93 e0       	ldi	r25, 0x03	; 3
 24c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['p']);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	93 e0       	ldi	r25, 0x03	; 3
 254:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['i']);
 258:	86 ed       	ldi	r24, 0xD6	; 214
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['o']);
 260:	8a ef       	ldi	r24, 0xFA	; 250
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['n']);
 268:	84 ef       	ldi	r24, 0xF4	; 244
 26a:	92 e0       	ldi	r25, 0x02	; 2
 26c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['I']);
 270:	86 e1       	ldi	r24, 0x16	; 22
 272:	92 e0       	ldi	r25, 0x02	; 2
 274:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['P']);
 278:	80 e4       	ldi	r24, 0x40	; 64
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['X']);
 280:	80 e7       	ldi	r24, 0x70	; 112
 282:	92 e0       	ldi	r25, 0x02	; 2
 284:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(0, 1);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
 290:	ca e0       	ldi	r28, 0x0A	; 10
	
	for(char i=0; i<10; i++)
	{
		hx_send_data(0);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 52 00 	call	0xa4	; 0xa4 <hx_send_data>
 298:	c1 50       	subi	r28, 0x01	; 1
	hx_write_char(HX_character['P']);
	hx_write_char(HX_character['X']);
	
	hx_set_coordinates(0, 1);
	
	for(char i=0; i<10; i++)
 29a:	d9 f7       	brne	.-10     	; 0x292 <display_title+0x78>
	{
		hx_send_data(0);
	}

	hx_write_char(HX_character['A']);
 29c:	86 ee       	ldi	r24, 0xE6	; 230
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['t']);
 2a4:	88 e1       	ldi	r24, 0x18	; 24
 2a6:	93 e0       	ldi	r25, 0x03	; 3
 2a8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['m']);
 2ac:	8e ee       	ldi	r24, 0xEE	; 238
 2ae:	92 e0       	ldi	r25, 0x02	; 2
 2b0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['e']);
 2b4:	8e eb       	ldi	r24, 0xBE	; 190
 2b6:	92 e0       	ldi	r25, 0x02	; 2
 2b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['g']);
 2bc:	8a ec       	ldi	r24, 0xCA	; 202
 2be:	92 e0       	ldi	r25, 0x02	; 2
 2c0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['a']);
 2c4:	86 ea       	ldi	r24, 0xA6	; 166
 2c6:	92 e0       	ldi	r25, 0x02	; 2
 2c8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['3']);
 2cc:	82 e9       	ldi	r24, 0x92	; 146
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['2']);
 2d4:	8c e8       	ldi	r24, 0x8C	; 140
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['A']);
 2dc:	86 ee       	ldi	r24, 0xE6	; 230
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character[' ']);
 2e4:	80 e2       	ldi	r24, 0x20	; 32
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['A']);
 2ec:	86 ee       	ldi	r24, 0xE6	; 230
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['D']);
 2f4:	88 ef       	ldi	r24, 0xF8	; 248
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['C']);
 2fc:	82 ef       	ldi	r24, 0xF2	; 242
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
}
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <display_menu>:

void display_menu(void)
{
	hx_set_coordinates(0, 3);
 308:	63 e0       	ldi	r22, 0x03	; 3
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_character['A']);
 310:	86 ee       	ldi	r24, 0xE6	; 230
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['1']);
 318:	86 e8       	ldi	r24, 0x86	; 134
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(0, 4);
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_character['A']);
 328:	86 ee       	ldi	r24, 0xE6	; 230
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['2']);
 330:	8c e8       	ldi	r24, 0x8C	; 140
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(0, 5);
 338:	65 e0       	ldi	r22, 0x05	; 5
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_character['A']);
 340:	86 ee       	ldi	r24, 0xE6	; 230
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['3']);
 348:	82 e9       	ldi	r24, 0x92	; 146
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(0, 6);
 350:	66 e0       	ldi	r22, 0x06	; 6
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_character['A']);
 358:	86 ee       	ldi	r24, 0xE6	; 230
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['4']);
 360:	88 e9       	ldi	r24, 0x98	; 152
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(HX_MAX_COL / 2, 3);
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	80 e3       	ldi	r24, 0x30	; 48
 36c:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_character['A']);
 370:	86 ee       	ldi	r24, 0xE6	; 230
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['5']);
 378:	8e e9       	ldi	r24, 0x9E	; 158
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(HX_MAX_COL / 2, 4);
 380:	64 e0       	ldi	r22, 0x04	; 4
 382:	80 e3       	ldi	r24, 0x30	; 48
 384:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_character['A']);
 388:	86 ee       	ldi	r24, 0xE6	; 230
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['6']);
 390:	84 ea       	ldi	r24, 0xA4	; 164
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(HX_MAX_COL / 2, 5);
 398:	65 e0       	ldi	r22, 0x05	; 5
 39a:	80 e3       	ldi	r24, 0x30	; 48
 39c:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_character['A']);
 3a0:	86 ee       	ldi	r24, 0xE6	; 230
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['7']);
 3a8:	8a ea       	ldi	r24, 0xAA	; 170
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	
	hx_set_coordinates(HX_MAX_COL / 2, 6);
 3b0:	66 e0       	ldi	r22, 0x06	; 6
 3b2:	80 e3       	ldi	r24, 0x30	; 48
 3b4:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
	
	hx_write_char(HX_character['A']);
 3b8:	86 ee       	ldi	r24, 0xE6	; 230
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
	hx_write_char(HX_character['8']);
 3c0:	80 eb       	ldi	r24, 0xB0	; 176
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
 3c8:	08 95       	ret

000003ca <main>:
 3ca:	2f ef       	ldi	r18, 0xFF	; 255
 3cc:	80 e7       	ldi	r24, 0x70	; 112
 3ce:	92 e0       	ldi	r25, 0x02	; 2
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <main+0x6>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0x10>
 3da:	00 00       	nop
void display_menu(void);

int main(void)
{
	_delay_ms(50);
    ADC_init();
 3dc:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	80 e7       	ldi	r24, 0x70	; 112
 3e4:	92 e0       	ldi	r25, 0x02	; 2
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x1c>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x26>
 3f0:	00 00       	nop
	
	_delay_ms(50);
	init_hx1230_control();
 3f2:	0e 94 86 00 	call	0x10c	; 0x10c <init_hx1230_control>
 3f6:	2f ef       	ldi	r18, 0xFF	; 255
 3f8:	84 e3       	ldi	r24, 0x34	; 52
 3fa:	9c e0       	ldi	r25, 0x0C	; 12
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x32>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
	
	_delay_ms(250);
	hx_fill_screen();
 408:	0e 94 e6 00 	call	0x1cc	; 0x1cc <hx_fill_screen>
 40c:	2f ef       	ldi	r18, 0xFF	; 255
 40e:	89 e6       	ldi	r24, 0x69	; 105
 410:	98 e1       	ldi	r25, 0x18	; 24
 412:	21 50       	subi	r18, 0x01	; 1
 414:	80 40       	sbci	r24, 0x00	; 0
 416:	90 40       	sbci	r25, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
	_delay_ms(500);
	hx_clear_screen();
 41e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <hx_clear_screen>
	display_title();
 422:	0e 94 0d 01 	call	0x21a	; 0x21a <display_title>
	display_menu();
 426:	0e 94 84 01 	call	0x308	; 0x308 <display_menu>
	
	uint8_t adc_channel = 0;
 42a:	c0 e0       	ldi	r28, 0x00	; 0
    while (1) 
    {
		_delay_ms(1000);
		adc_value = ADC_get_value(adc_channel);
		
		hx_set_coordinates((adc_channel / 4) * HX_MAX_COL / 2 + 18, (adc_channel % 4) + 3);
 42c:	d0 e6       	ldi	r29, 0x60	; 96
 42e:	2f ef       	ldi	r18, 0xFF	; 255
 430:	83 ed       	ldi	r24, 0xD3	; 211
 432:	90 e3       	ldi	r25, 0x30	; 48
 434:	21 50       	subi	r18, 0x01	; 1
 436:	80 40       	sbci	r24, 0x00	; 0
 438:	90 40       	sbci	r25, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
	uint16_t adc_value = 0;
	
    while (1) 
    {
		_delay_ms(1000);
		adc_value = ADC_get_value(adc_channel);
 440:	8c 2f       	mov	r24, r28
 442:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_get_value>
		
		hx_set_coordinates((adc_channel / 4) * HX_MAX_COL / 2 + 18, (adc_channel % 4) + 3);
 446:	6c 2f       	mov	r22, r28
 448:	63 70       	andi	r22, 0x03	; 3
 44a:	6d 5f       	subi	r22, 0xFD	; 253
 44c:	8c 2f       	mov	r24, r28
 44e:	86 95       	lsr	r24
 450:	86 95       	lsr	r24
 452:	d8 9f       	mul	r29, r24
 454:	c0 01       	movw	r24, r0
 456:	11 24       	eor	r1, r1
 458:	95 95       	asr	r25
 45a:	87 95       	ror	r24
 45c:	8e 5e       	subi	r24, 0xEE	; 238
 45e:	0e 94 bf 00 	call	0x17e	; 0x17e <hx_set_coordinates>
		hx_write_char(HX_character['0']);
 462:	80 e8       	ldi	r24, 0x80	; 128
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hx_write_char>
		
		adc_channel ++;
 46a:	cf 5f       	subi	r28, 0xFF	; 255
		adc_channel %= 8;
 46c:	c7 70       	andi	r28, 0x07	; 7
 46e:	df cf       	rjmp	.-66     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
